Classes needed: 

abstract class Player
class MachinePlayer extends Player
class Board
class Move

Modules:

1) The game board
/**
 * Adds a chip to the gameboard.
 * @param c - is a colored chip to be added
**/
void addChip(int c)

2) Determine if a move is valid
/**
 * Looks at a Move in respect to the board, determines if it's valid. 
 * @param m - move to be made
 * @return true - if move is legal
 * @return false - if move is illegal
**/
boolean isValidMove(Move m)

3) Generate a list of valid moves
/**
 * Valid moves passed into the game tree search. 
 * @param b - the game board
 * @return int[][]- a multivariable boolean array
**/
int[][] validMoves(Board b)

4) Establish connections with chips of same color
/**
 * Look at the chips on the board, and determine possible moves to make a possible network.
 * @param b - the current game board
 * @param side - the player whose chips is to be connected
**/
void linkChips(Board b, int side)

5) Identify if network exists
/**
 * Look at the MachinePlayer's board, checking to see if a network exists.
 * @param b - the current gameboard
 * @return true - if network is found
 * @return false - if network is not found
**/
boolean hasValidNetwork(Board b)

6) Scoring and evaluating a board
/**
 * Assigns scores to a board based on positioning of chips. 
 * @param b - the current game board
 * @return int - the score of the board
*/
int evaluateBoard(Board b)

7) Performing a game search tree and pruning
/**
 * Chooses a Move based on the state of the game board. Automatically prunes away games that can't be won.
 * @param seachDepth - a limit for how much of the gametree to traverse
 * @return Move - the best move
**/
Move chooseMove(int searchDepth)
/**
 * Applies alpha-beta pruning to given gametree
 * @param alpha- the upperbound for the score the MachinePlayer can acheive
 * @param beta- the lowerbound for the score the other Player can acheive
**/
void alphaBetaPrune(int alpha, int beta)


